// Node Js Events module

//import the events module from node
//Beware that EventEmitter is a class
//create a class called MyEmitter and inherit from EventEmitter
//create a new object myEmitter
//myEmitter.on is the same as(myEmitter.addListerner)
//What the .on is doing is listening for an event to emit ! so the question is how is an event emitted ?
//An event is emitted by using the .emit method!
//The most important thing to note is that the name of the event to emit is passed to the .emit as an argument.
//When the .emit is triggred a signal is sent to the .on method which then calls the callback function and logs ('Hey I got called)

const EventEmitter = require('events');
class MyEmitter extends EventEmitter{}

let  myEmitter = new MyEmitter();

myEmitter.on('calling',()=>{
    console.log('Hey I just got called')
});


myEmitter.emit('calling');

//setImmediate
//setImmediate is like process.nextTick
//It is called after the first event loop
//This function logs out "Hey I just got called" before "I am process . next"

myEmitter.on('calling',()=>{
    setImmediate(()=>{
        console.log('I am process . next')
    });
    console.log('Hey I just got called')
});
myEmitter.emit('calling');


//Passing Argument to Emit
const EventEmitter = require('events');


class MyEmitter extends EventEmitter{}


let  myEmitter = new MyEmitter();

myEmitter.once('calling',(obj)=>{
    if(obj.name == 'chris'){
        console.log(`Yes the name was ${obj.name}`)
    }
    else{
        console.log('Nahh man try again')
    }
});

myEmitter.emit('calling',{'name':'chris'});

//running the programme logs 
//Yes the name was chris
//If the name value is changed, "Nahh man try agai will get logged"


// Inherit from the event module uisng prototypes.

const EventEmitter = require('events');

function MyEmitter(){}

MyEmitter.prototype = Object.create(EventEmitter.prototype);
MyEmitter.constructor = MyEmitter;


const newEmitter =  new MyEmitter();

newEmitter.on("foo",()=>{
    console.log('hello');
})

newEmitter.emit('foo');




